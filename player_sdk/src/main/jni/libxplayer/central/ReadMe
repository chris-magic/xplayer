-
-
video player have the following state machine:
    demux state machine ,
    audio decoder state machine,
    video decoder state machine ,


Each State Machine has its own state .

Such as Video Decoder State Machine has state :
            STATE_DECODER_START,
            STATE_DECODER_WAIT,
            STATE_DECODER_DECODING.


-
-
  Demux State Machine Rename to Central Engine State Machine .
    change media demux work be put into Central Engine State Machine Thread


-
-
 First Decode will happen until is_pkt_q_full(mediaFileHandle->start_playing_buffering_time) be performed.
 So before that ,you should not call decode function.

-
-

-
- Audio OutPut
-- opensl es
    任何一个 OpenSL ES 的对象，创建成功后，都进入 SL_OBJECT_STATE_UNREALIZED 状态，这种状态下，系统不会为它分配任何资源，直到调用 Realize 函数为止。
    Realize 后的对象，就会进入 SL_OBJECT_STATE_REALIZED 状态，这是一种“可用”的状态，只有在这种状态下，对象的各个功能和资源才能正常地访问。

    OpenSL ES major operations is interfaces ,such as: SLObjectItf ---Itf = Interface.

    - opensl es 遇到一个问题：
    - 所有逻辑走完 调用开始播放 SetPlayState(player->slPlay,  SL_PLAYSTATE_PLAYING ）,但是并没有调用回调函数。-----》最后解决方法： 在SetPlayState 之前调用下 Enqueue 方法，然后后面就可以调用了。



-- audio track

-
-
- GLSurfaceView.Renderer
    -- GLSurfaceView onPause;
            /**
            * Inform the view that the activity is paused. The owner of this view must
            * call this method when the activity is paused. Calling this method will
            * pause the rendering thread.
            * Must not be called before a renderer has been set.
            */
           public void onPause();

    -- GLSurfaceView onResume;
            /**
             * Inform the view that the activity is resumed. The owner of this view must
             * call this method when the activity is resumed. Calling this method will
             * recreate the OpenGL display and resume the rendering
             * thread.
             * Must not be called before a renderer has been set.
             */
            public void onResume();

    --  void queueEvent (Runnable r)
        Queue a runnable to be run on the GL rendering thread. This can be used to communicate with the Renderer on the rendering thread. Must not be called before a renderer has been set.
        r	Runnable: the runnable to be run on the GL rendering thread.

    -- GLSurfaceView.Render pause()
        this.setRenderMode(RENDERMODE_WHEN_DIRTY);  & queueEvent

-
-
- MediaPlayer start() function
    -- Change state to Buffering State.
    -- In Buffering state notify Java Layer buffering percent
    -- If Buffering percent become 100% , the central engine will change into PLAY_WAIT state ,then You can call java Layer play() function to start play.

- MediaPlayer play() function
    -- When Buffering percent 100% ,then audio decoder & video decoder thread begain to work.
    -- Notify GLSurfaceView Render Thread to change render mode from  RENDERMODE_WHEN_DIRTY to RENDERMODE_CONTINUOUSLY.

-
-
- Demux Thread change state from PLAYING to PLAY_END_OF_FILE .
        - this time the audio_packet_q video_packet_q audio_frame_q video_frame_q may be not null ,what should I do Under this condition.

-
-
- Pause().
    - GLSurfaceView setRenderMode(RENDERMODE_WHEN_DIRTY)
    - opensl es audio engine SetPlayState(bqPlayerPlay, SL_PLAYSTATE_PAUSED)
    -
    - audio & video decoder change_state(DECODE_STATE_WAIT) ,not decode media data.







-
- Memory
    adb shell dumpsys meminfo com.cmcm.v.cmplayersdk

-



-
-
- seek
    现在浏览器的seek ，完了后会再掉BaseVideoView的start（） 方法。

    需要把播放器的三个状态机的流程和工作再梳理下。。。。

    seek 时间点：
            1.播放中seek
            2.暂停时候seek
            3.缓冲中seek
            4.播放结束seek.

            5.起播之前的seek ，这个时候的seek时间点和其他阶段的seek 处理是不同的,这个时间点是在onPrepared 回调中判断是否需要进行seek 操作的。
                首次seek时机移到了onprepared回调中
            -
    seek 完成后 要调用player.start 方法播放起来。

-
-
- 播放结束后 oncomplete ，音视频解码线程在堵塞等待数据，这里是有问题的，需要改成非阻塞。


--
- 用户pause 时机：   1.buffering 时候也可能会调pause ,stop ,close
                    2.prepared 之前也可能会调pause stop close


--
-   视频tab 页面，就一个播放器实例

--
-   view 中有一个播放器实例，是这样的，view对应的播放器可以多次销毁多次创建，但view 可以只创建一次，最后不需要的时候再销毁。

--
--
-   播放器实例销毁的时候，如果播放器不支持多实例，就要保证上一个实例销毁后，才能创建下一个播放器实例。同时要注意一个问题，就是opengl es的资源必须在GLSurfaceView Render 线程创建。

-
-   首次播放，this->mediaFileHandle->notify(MEDIA_BUFFERING_UPDATE ,100 ,100); 上层调 play 播放。

--
-   first_show_pic   这个回调并没有调起播放器播放，而是告诉上层播放器控制界面的变化。

-
-   触控面板
    每次通过触控面板进行播放器相关操作后都会执行 updatePausePlay  ,这个函数会对播放器的状态进行判断，从而显示相应的按钮。

-
- opensl es
    https://audioprograming.wordpress.com/2012/10/29/lock-free-audio-io-with-opensl-es-on-android/
    callback should not be blocked.


TODO
    1.缓冲buffer机制调整
    2.音视频同步机制 , 可以考虑按照系统的时间戳进行同步。 按照系统时钟时间戳进行同步更合理，如何做？？
    3.同步那里逻辑需要改下。
------------>
TODO
    1.buffer 逻辑修改下 ：
        1.1）packet队列只是缓冲数据，packet队列的状态最终只会影响文件是否读取结束。
        1.2）frame queue 队列负责和上层交互，如果队列中没有数据，则通知上层buffer ，
-----
    缓冲逻辑
    buffer 逻辑 ：
    1.1）packet队列只是缓冲数据，packet队列的状态最终只会影响文件是否读取结束。
    1.2）frame queue 队列负责和上层交互，如果frame 队列中没有数据，则通知上层buffer .
    1.3）
    buffer 卡顿，但此时audio packet & video packet 都有数据 ，这个原因有可能是音频的pts 和视频的pts差的有点多？？尝试把X_MAX_FRAME_VIDEO_Q_NODE_CNT 和X_MAX_FRAME_AUDIO_Q_NODE_CNT 差距调大些。一个25，一个100.

-----
    线程 Demux Thread
    作用： 就是读数据   Demux audio & video data into audio video packet q
    1.openfile  ==>获取文件流信息
    2.读media data ,分别入audio packet q 和 video packet q.
    3.读到文件末尾的处理
    4.

    --> buffering梳理逻辑：
        Demux Thread：按照播放器播放流程梳理，获取文件信息，开始bufffer,播放 ,播放到文件末尾,播放完成；

-----
    Seek 逻辑 【播放器prepared后之后 才可以进行seek ,如果是记住历史记录的，则是在buffering 之前进行seek，就是在prepared这里做的】
    1.开始seek[prepared中的seek]
    2.播放中seek【playing 中的seek】
    3.暂停seek【paused 中的seek】
    4.seek到文件末尾【play file end 中的seek】
    5.播放结束seek到文件开头

    --
    每次seek后 会把开始时候packet q buffer的size 重置到开始播放时候的大小。

    --


-----
   TODO 未来的版本迭代：

   1.同步逻辑
   同步那里逻辑需要改下
   DTS（Decode timestamp 解码时间戳）
   PTS（Presentation timestamp显示时间戳）
   SCR (System Clock Reference)
   STC（System time clock ）
   同步有三种选择：同步音频到视频，同步视频到音频，或者音视频都同步到外部时钟。
   一般采用同步视频到音频，因为人对声音尤其的敏感。


   2：






